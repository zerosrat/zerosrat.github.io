<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Blog of Zero Yu]]></title>
  <subtitle><![CDATA[Stay Young, Stay Simple.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://zerosrat.github.io/"/>
  <updated>2016-04-13T15:38:16.093Z</updated>
  <id>http://zerosrat.github.io/</id>
  
  <author>
    <name><![CDATA[Zero Yu]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[UI5 知识分享]]></title>
    <link href="http://zerosrat.github.io/2016/04/11/UI5/"/>
    <id>http://zerosrat.github.io/2016/04/11/UI5/</id>
    <published>2016-04-11T14:56:56.000Z</published>
    <updated>2016-04-13T15:38:16.093Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><h2 id="参考">参考</h2><blockquote>
<p>官方指南 - <a href="https://sapui5.hana.ondemand.com/#docs/guide/99ac68a5b1c3416ab5c84c99fefa250d.html" target="_blank" rel="external">Demo Kit</a></p>
</blockquote>
<h2 id="What_is_UI5?">What is UI5?</h2><p>UI5是SAP的一个企业网页前端框架，基于jQuery，有很多可以直接使用的控件。UI5又分为 <a href="http://openui5.org/" target="_blank" rel="external">OpenUI5</a> 和 SAPUI5，其中前者是开源的，可以在 <a href="https://github.com/SAP/openui5" target="_blank" rel="external">github</a> 获取。</p>
<h2 id="Why_UI5?">Why UI5?</h2><p>今年1月到SAP实习，到现在主要是做前端开发，对UI5也有了一定的了解，可以为大家带来一些分享。做企业级网站的话，UI5或许是个不错的选择。</p>
<h1 id="开发环境搭建">开发环境搭建</h1><h2 id="Eclipse_+_SAPUI5_Tools">Eclipse + SAPUI5 Tools</h2><p><img src="http://7xoxnz.com1.z0.glb.clouddn.com/ui5_eclipse.png" width="100" alt="图片名称"></p>
<p>搭建步骤直接从官方文档拖过来：</p>
<blockquote>
<p>Required Software for Installing and Running SAPUI5 Tools<br>To install and run SAPUI5 tools, the following software has to be installed:</p>
<ul>
<li><p>Java Runtime environment: JRE version, as supported by the used Eclipse release, in 32- or 64-Bit. For example, for Eclipse Mars, JRE 1.7 is recommended but &gt; JRE 1.8 is supported as well.&gt; </p>
</li>
<li><p>Operating system: Windows XP, Vista, 7 (32- or 64-Bit), 8/8.1</p>
</li>
<li><p>Browser: Not relevant, except for Internet Explorer 9.0 or higher for embedded application preview</p>
</li>
</ul>
<p>Installation Process for SAPUI5 Tools<br>To install SAPUI5 tools, proceed as follows:</p>
<ol>
<li><p>Launch your Eclipse workbench. Open the installation wizard by choosing <strong>Help&gt;Install New Software</strong>.</p>
</li>
<li><p>In the Work with field of the installation wizard, specify the target directory of the package.</p>
</li>
<li><p>To add the new installation directory, choose Add and then choose Archive to specify the location. Enter a name for your local software site.</p>
</li>
<li><p>Select all features for the UI development toolkit for HTML5 and choose Next.</p>
</li>
<li><p>Review the feature groups to be installed and choose Next.</p>
</li>
<li><p>Accept the terms of the license agreement and choose Finish to initiate the installation of selected feature groups.</p>
</li>
<li><p>In the Certificates dialog confirm the certificates from Eclipse.org and SAP with OK.</p>
</li>
<li><p>To apply the changes of the installation procedure, restart the Eclipse workbench.</p>
</li>
<li><p>To check, whether the installation has been successful, proceed as follows:</p>
</li>
</ol>
<p>For application development open Eclipse and choose <strong> File&gt;New&gt;Other…&gt;SAPUI5 Application Development&gt;Application Project</strong>. If the installation has been successful, the New Application Project wizard opens.</p>
</blockquote>
<h2 id="Intellij_IDEA_+_OpenUI5">Intellij IDEA + OpenUI5</h2><p><img src="http://7xoxnz.com1.z0.glb.clouddn.com/ui5_idea.gif" width="100" alt="图片名称"></p>
<blockquote>
<p><a href="http://scn.sap.com/community/developer-center/front-end/blog/2014/09/22/configuring-jetbrains-webstorm-for-ui5-development" target="_blank" rel="external">参考国外友人的分享</a></p>
</blockquote>
<h2 id="SAP_Web_IDE">SAP Web IDE</h2><p><img src="http://7xoxnz.com1.z0.glb.clouddn.com/ui5_webide.png" width="100" height="100" alt="图片名称"></p>
<p>最后一种方式最简单，只需要一个HCP账号就行了：</p>
<ol>
<li><p><a href="https://account.hanatrial.ondemand.com/" target="_blank" rel="external">登录HCP</a> (没有账号的话可以先注册)</p>
</li>
<li><p>点击侧边栏的 <strong>Subscriptions</strong></p>
</li>
<li><p>点击 <strong>webide</strong></p>
</li>
<li><p>点击 <strong>Application URL</strong></p>
</li>
</ol>
<h1 id="Hello_World">Hello World</h1><h1 id="两个重要概念–Data_Binding_&amp;_Navigation_and_Routing">两个重要概念–Data Binding &amp; Navigation and Routing</h1>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><h2 id="参考">参考</h2><blockquote>
<p>官方指南 - <a href="https://sapui5.hana.ondemand.com/#docs/guide/99ac68a5b1c3416ab5c84c99f]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[谈谈Java设计模式]]></title>
    <link href="http://zerosrat.github.io/2015/12/24/%E8%B0%88%E8%B0%88Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://zerosrat.github.io/2015/12/24/谈谈Java设计模式/</id>
    <published>2015-12-24T05:18:20.000Z</published>
    <updated>2016-04-13T15:05:16.555Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><h3 id="为什么要使用">为什么要使用</h3><p>一个程序员对设计模式的理解: 不懂为什么要把很简单的东西搞得那么复杂。后来才开始明白我所看到的“复杂”恰恰就是设计模式的精髓所在，我所理解的“简单”就是一把钥匙开一把锁的模式，目的仅仅是着眼于解决现在的问题，而设计模式的“复杂”就在真正理解设计模式之前我一直在编写“简单”的代码。</p>
<h3 id="目录">目录</h3><p>单例模式（Singleton）<br>适配器模式 （Adapter）</p>
<h2 id="单例模式（Singleton）">单例模式（Singleton）</h2><h3 id="是什么">是什么</h3><p>Singleton 是一种创建性模型，它用来确保只产生一个实例，并提供一个访问它的全局访问点。对一些类来说，保证只有一个实例是很重要的，比如有的时候，数据库连接或 <code>Socket</code> 连接要受到一定的限制，必须保持同一时间只能有一个连接的存在。再举个例子，集合中的 <code>Set</code> 中不能包含重复的元素，添加到 <code>Set</code> 里的对象必须是唯一的，如果重复的值添加到 <code>Set</code> ，它只接受一个实例。JDK中正式运用了单例模式来实现 <code>Set</code> 的这一特性，大家可以查看 <code>java.util.Collections</code> 里的内部静态类 <code>SingletonSet</code> 的原代码。其实单例是最简单但也是应用最广泛的模式之一，在 JDK 中随处可见。</p>
<h3 id="饿汉式单例">饿汉式单例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Singleton single = <span class="keyword">new</span> Singleton();</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> single;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="懒汉式单例">懒汉式单例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">	<span class="keyword">private</span> Singleton single = <span class="keyword">null</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(single == <span class="keyword">null</span>)&#123;</span><br><span class="line">			single = <span class="keyword">new</span> Singleton();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> single;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="区别">区别</h3><p>都是通过使用 <code>private</code> 访问修饰符，将类的构造器指定为 <code>private</code> ，从而无法创建该类的对象了，除非是使用 <code>Singleton.getInstance()</code> .</p>
<p>可以看到懒汉式是等到要使用这个对象时再创建的；而饿汉式在类加载时对象就被实例化，从资源利用来看，效率比懒汉更低。</p>
<p>懒汉是线程不安全的，在并发环境下可能出现多个实例；而饿汉是天生安全的。</p>
<h2 id="适配器模式（Adapter）">适配器模式（Adapter）</h2><blockquote>
<p>更多参考 <a href="http://www.cnblogs.com/java-my-life/archive/2012/04/13/2442795.html" target="_blank" rel="external">http://www.cnblogs.com/java-my-life/archive/2012/04/13/2442795.html</a></p>
</blockquote>
<h3 id="是什么-1">是什么</h3><p>适配器模式把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。</p>
<h3 id="类适配器模式">类适配器模式</h3><p><img src="http://7xoxnz.com1.z0.glb.clouddn.com/classAdapter.png" alt="类适配器模式"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这是源类Adaptee也有的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sampleOperation1</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是源类Adapteee没有的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sampleOperation2</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sampleOperation1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 由于源类Adaptee没有方法sampleOperation2()</span><br><span class="line">     * 因此适配器补充上这个方法</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sampleOperation2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//写相关的代码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="对象适配器模式">对象适配器模式</h3><p><img src="http://7xoxnz.com1.z0.glb.clouddn.com/objAdapter.png" alt="对象适配器模式"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这是源类Adaptee也有的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sampleOperation1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是源类Adapteee没有的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sampleOperation2</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sampleOperation1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Adaptee adaptee;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adapter</span><span class="params">(Adaptee adaptee)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adaptee = adaptee;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 源类Adaptee有方法sampleOperation1</span><br><span class="line">     * 因此适配器类直接委派即可</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sampleOperation1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adaptee.sampleOperation1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 源类Adaptee没有方法sampleOperation2</span><br><span class="line">     * 因此由适配器类需要补充此方法</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sampleOperation2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//写相关的代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="区别-1">区别</h3><p>类适配器使用继承，是静态的；对象适配器使用组合，是动态的。</p>
<p>类适配器不能与Adaptee的子类一起工作；对象适配器可以。</p>
<p>类适配器可以覆盖Adaptee的一些接口；对象适配器则需要定义Adaptee的子类，然后使用组合。</p>
<p>建议尽量使用对象适配器，在继承前先考虑组合。具体问题具体分析也很重要，最适合的才是最好的。</p>
]]></content>
    <summary type="html">
    <![CDATA[学习Java设计模式]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Notification官方文档翻译及解析]]></title>
    <link href="http://zerosrat.github.io/2015/12/05/Android-Notification%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E5%8F%8A%E8%A7%A3%E6%9E%90/"/>
    <id>http://zerosrat.github.io/2015/12/05/Android-Notification官方文档翻译及解析/</id>
    <published>2015-12-05T07:41:38.000Z</published>
    <updated>2015-12-24T06:53:21.870Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>Notification（以下会用 <strong>通知</strong> 替代）是一种消息，它会显示在你的应用程序的UI之外。当你告诉系统发出一个通知，它首先会以一个图标的形式显示在 <strong>通知区域</strong> (notification area)。要查看通知的详细内容，用户会打开 <strong>通知抽屉</strong> （notification drawer）。通知区域和通知抽屉都是用户能够随时查看的系统控制区域。</p>
<p><img src="http://7xoxnz.com1.z0.glb.clouddn.com/notification_area.png" alt="通知区域中的通知"></p>
<p><img src="http://7xoxnz.com1.z0.glb.clouddn.com/notification_drawer.png" alt="通知抽屉中的通知"></p>
<blockquote>
<p>官方文档地址 - <a href="http://developer.android.com/guide/topics/ui/notifiers/notifications.html" target="_blank" rel="external">Notification | Android</a></p>
<p>注：本指南使用的是 <code>Support Library version 4</code> 的 <code>NotificationCompat.Builder</code> 类，除非另有提及。</p>
</blockquote>
<h2 id="设计时需要考虑">设计时需要考虑</h2><p>通知，是Android UI的重要组成部分，拥有它自己的设计准则。Android 5.0引入了Material Design是尤为重要的一个变化，建议阅读 <a href="http://developer.android.com/training/material/index.html" target="_blank" rel="external">Material Design</a> 的更多信息。你可以阅读 <a href="http://developer.android.com/design/patterns/notifications.html" target="_blank" rel="external">Notification</a> 的设计指南，来了解如何设计通知和他们之间的交互。</p>
<h2 id="创建一个通知">创建一个通知</h2><p>你需要在一个 <code>Notification.Builder</code>  对象中明确通知UI的信息和动作。要创建通知本身，你需要调用 <code>NotificationCompat.Builder.build()</code> ， 这个调用会返回一个包含你的声明内容的通知对象。要发出通知，调用 <code>NotificationManager.notify()</code> 即可。</p>
<h3 id="需要明确的通知内容">需要明确的通知内容</h3><p>一个 <code>Notification</code> 对象必须包含如下内容：</p>
<ul>
<li>设置小图标 <code>setSmallIcon()</code></li>
<li>设置标题 <code>setContentTitle()</code></li>
<li>设置具体文本内容 <code>setContentText()</code></li>
</ul>
<h3 id="通知的动作">通知的动作</h3><p>虽然他们是可选的，但你至少需要为通知添加一个动作。这个动作允许用户直接从通知跳转到你应用中的一个活动，在那里用户能够看到更多内容或是更多操作。</p>
<p>通知提供了多种动作。你需要定义当用户点击通知被触发的动作；通常这个动作会打开你的应用中的活动。你也可以在通知上加上Button来添加其他动作，像是关闭闹钟或是对文本信息进行回复；这个特征在Android 4.1中加入。如果你使用了动作Button，你必须在你的活动中将其逻辑实现；更多请参考处理兼容性章节。</p>
<p>在一个通知中，动作是由 <code>PendingIntent</code> 定义的。调用 <code>setContentIntent()</code> 来添加PendingIntent后，当用户点击通知抽屉的通知时，就会跳转到一个活动中去了。</p>
<h3 id="创建一个简单的通知">创建一个简单的通知</h3><p>下面的代码定义了一个用户点击后可以返回活动的通知。</p>
<blockquote>
<p>在官方版本的基础上，加入了点击通知后通知消失<br>具体的代码是 <code>notification.flags |= Notification.FLAG_AUTO_CANCEL;</code><br>当然也可以调用 <code>NotificationManager</code> 的 <code>cancel()</code> 方法来让指定通知消失</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">NotificationCompat.Builder mbuilder = <span class="keyword">new</span> NotificationCompat.Builder(MainActivity.<span class="keyword">this</span>)</span><br><span class="line">        .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">        .setContentTitle(<span class="string">"Title"</span>)</span><br><span class="line">        .setContentText(<span class="string">"Hello Notification"</span>);</span><br><span class="line"><span class="comment">//开启一个活动并保证活动的返回栈顺序，详情见之后章节        </span></span><br><span class="line">TaskStackBuilder taskStackBuilder = TaskStackBuilder.create(MainActivity.<span class="keyword">this</span>);</span><br><span class="line">taskStackBuilder.addParentStack(SecondAty.class);</span><br><span class="line">taskStackBuilder.addNextIntent(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondAty.class));</span><br><span class="line">PendingIntent pendingIntent = taskStackBuilder.getPendingIntent(<span class="number">0</span>, PendingIntent.FLAG_CANCEL_CURRENT);</span><br><span class="line">mbuilder.setContentIntent(pendingIntent);</span><br><span class="line"></span><br><span class="line">NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line">Notification notification= mbuilder.build();</span><br><span class="line">notification.flags |= Notification.FLAG_AUTO_CANCEL;</span><br><span class="line">manager.notify(<span class="number">1</span>, notification);</span><br></pre></td></tr></table></figure>
<h3 id="处理兼容性">处理兼容性</h3><p>并非所有通知特性在一个安卓版本是可用的，即使是这些方法在支持类 <code>NotificationCompat.Builder</code> 中有设置。例如，动作Button，它依赖于可展开通知，只会在Android 4.1 和更高版本出现（即使设置了动作Button，低版本中也不会出现）。</p>
<p>为了保证最好的兼容性，使用 <code>NotificationCompat</code> 和它的子类创建通知，特别是 <code>NotificationCompat.Builder</code>. 另外，照如下步骤来实现一个通知：</p>
<ol>
<li>为用户提供通知的功能，无论他们使用的是那个版本。为了做到这一点，保证所有功能是对用户是有用的。你或许要添加一个新的活动来做到这一点。<br>例如，你想要使用 <code>addAction()</code> 来提供控制多媒体播放的开始和停止功能，首先需要在活动中实现这个控制。</li>
<li>保证所有用户可以在活动中使用到这个功能，即是点击通知之后进入活动。为了做到这一点，为活动创建 <code>PendingIntent</code> ，调用 <code>setContentIntent()</code> 来将 <code>PendingIntent</code> 添加到通知中。</li>
<li>现在添加可展开通知特性到你的通知中。记住任何你加入的功能在活动中是有意义的。</li>
</ol>
<h2 id="开启一个活动并保证活动的返回栈顺序">开启一个活动并保证活动的返回栈顺序</h2><p>当你从通知开启一个活动时，你必须保证用户期望的活动返回栈顺序。点击返回键从应用的正常返回一直到主屏幕。为了保证返回逻辑，你应该在一个新的栈中开启活动。你如何设置 <code>PendingIntent</code> 来获得一个新的栈取决于你开启活动的特性。这里通常有两种情况：</p>
<h3 id="常规活动">常规活动</h3><pre><code>你开启的活动是应用工作流程的一部分时。在这种情况下，设置 <span class="escape">`P</span>endingIntent<span class="escape">` </span>来开启一个新的栈，并且提供 <span class="escape">`P</span>endingIntent<span class="escape">` </span>一个返回栈来重新产生应用的标准返回顺序。

Gmail app的通知是个不错的例子。当你点击一个电邮信息的通知，你看见了通知。点击返回键使你从Gmail返回到主界面，就好像你之前已经从主界面进入了Gmail而非从一个通知中进入。

不管是什么应用，你在什么时候点击通知，这都会发生。例如，如果你正在Gmail中写信息，这时你点击了一个Gmail信息的通知，你会立即进入那个email中。点击返回键会到收件箱，然后才是主屏幕，而非把你带到你正在编辑的信息。
</code></pre><h3 id="特殊活动">特殊活动</h3><pre><code>用户只会看见这个活动如果它是从通知跳转进入的。在某种意义上，通知不能完全展示出所需信息。在这种情况下，设置 <span class="escape">`P</span>endingIntent<span class="escape">` </span>来开启一个新的栈。这时不需要创造一个返回栈，因为开启的活动不属于应用工作流程的一部分。点击返回键会返回主屏幕。
</code></pre><h3 id="设置一个常规活动的_PendingIntent">设置一个常规活动的 PendingIntent</h3><p>为了设置 <code>PendingIntent</code> 进入活动，按如下步骤：</p>
<ol>
<li><p>在mainifest中定义你的application的活动层次<br> a. 支持 Android 4.0.3 以及更早版本。为了做到这一点，通过添加一个 <code>&lt;meta-data&gt;</code> 标签作为 <code>&lt;activity&gt;</code> 的子标签来明确活动的之前活动。<br> 为这个元素设置 <code>android:name=&quot;android.support.PARENT_ACTIVITY&quot;</code>.设置 <code>android:value=&quot;&lt;parent_activity_name&gt;</code>.详情见下面的示例XML。</p>
<p> b. 支持 Android 4.1 以及更高版本。为了做到这一点，加入 <code>android:parentActivityName</code> 到你要开启的活动的 <code>&lt;activity&gt;</code> 元素中去。</p>
</li>
</ol>
<p>示例XML：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span></span><br><span class="line">    <span class="attribute">android:name</span>=<span class="value">".MainActivity"</span></span><br><span class="line">    <span class="attribute">android:label</span>=<span class="value">"@string/app_name"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">activity</span></span><br><span class="line">    <span class="attribute">android:name</span>=<span class="value">".SecondAty"</span></span><br><span class="line">    <span class="attribute">android:parentActivityName</span>=<span class="value">".MainActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta-data</span></span><br><span class="line">        <span class="attribute">android:name</span>=<span class="value">"android.support.PARENT_ACTIVITY"</span></span><br><span class="line">        <span class="attribute">android:value</span>=<span class="value">".MainActivity"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>创建基于开启活动的 <code>Intent</code> 的返回栈。<br> a. 创建开启活动的 <code>Intent</code><br> b. 通过 <code>TaskStackBuilder.create()</code> 创建一个 <code>TaskStackBuilder</code> 对象。<br> c. 通过 <code>addParentStack()</code> 来添加返回栈。<br> d. 通过 <code>addNextIntent()</code> 来添加开启活动的 <code>Intent</code><br> e. 如果你需要，通过调用 <code>TaskStackBuilder.editIntentAt()</code> 为 <code>intent</code> 对象添加参数。有时保证目标活动显示有意义的数据当用户点击返回键时是必要的。<br> f. 调用 <code>getPendingIntent</code> 来得到 <code>PendingIntent</code> 对象。之后你可以将 <code>PendingIntent</code> 作为调用 <code>setContentIntent</code> 的参数。</li>
</ol>
<p>如下是个示例代码段：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TaskStackBuilder taskStackBuilder = TaskStackBuilder.create(MainActivity.<span class="keyword">this</span>);</span><br><span class="line">taskStackBuilder.addParentStack(SecondAty.class);</span><br><span class="line">taskStackBuilder.addNextIntent(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondAty.class));</span><br><span class="line">PendingIntent pendingIntent = taskStackBuilder.getPendingIntent(<span class="number">0</span>, PendingIntent.FLAG_CANCEL_CURRENT);</span><br><span class="line">mbuilder.setContentIntent(pendingIntent);</span><br></pre></td></tr></table></figure>
<h3 id="设置一个特殊活动的_PendingIntent">设置一个特殊活动的 PendingIntent</h3><p>使用较少，直接放代码，以后用到再更新</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span></span><br><span class="line">    <span class="attribute">android:name</span>=<span class="value">".ResultActivity"</span></span><br><span class="line"><span class="attribute">...</span></span><br><span class="line">    <span class="attribute">android:launchMode</span>=<span class="value">"singleTask"</span></span><br><span class="line">    <span class="attribute">android:taskAffinity</span>=<span class="value">""</span></span><br><span class="line">    <span class="attribute">android:excludeFromRecents</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Instantiate a Builder object.</span></span><br><span class="line">NotificationCompat.Builder builder = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">// Creates an Intent for the Activity</span></span><br><span class="line">Intent notifyIntent =</span><br><span class="line">        <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ResultActivity.class);</span><br><span class="line"><span class="comment">// Sets the Activity to start in a new, empty task</span></span><br><span class="line">notifyIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK</span><br><span class="line">                        | Intent.FLAG_ACTIVITY_CLEAR_TASK);</span><br><span class="line"><span class="comment">// Creates the PendingIntent</span></span><br><span class="line">PendingIntent notifyPendingIntent =</span><br><span class="line">        PendingIntent.getActivity(</span><br><span class="line">        <span class="keyword">this</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        notifyIntent,</span><br><span class="line">        PendingIntent.FLAG_UPDATE_CURRENT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Puts the PendingIntent into the notification builder</span></span><br><span class="line">builder.setContentIntent(notifyPendingIntent);</span><br><span class="line"><span class="comment">// Notifications are issued by sending them to the</span></span><br><span class="line"><span class="comment">// NotificationManager system service.</span></span><br><span class="line">NotificationManager mNotificationManager =</span><br><span class="line">    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line"><span class="comment">// Builds an anonymous Notification object from the builder, and</span></span><br><span class="line"><span class="comment">// passes it to the NotificationManager</span></span><br><span class="line">mNotificationManager.notify(id, builder.build());</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[学习并使用Notification]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[MarkDown语法手册]]></title>
    <link href="http://zerosrat.github.io/2015/11/18/hello-markdown/"/>
    <id>http://zerosrat.github.io/2015/11/18/hello-markdown/</id>
    <published>2015-11-18T08:06:21.000Z</published>
    <updated>2015-12-24T06:51:15.175Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p><a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">Markdown</a> 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。</p>
<blockquote>
<p>优雅使用MarkDown</p>
</blockquote>
<h2 id="常用语法">常用语法</h2><h3 id="斜体和粗体">斜体和粗体</h3><p>使用 * 和 ** 分别表示斜体和粗体。</p>
<p>示例：</p>
<p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p>
<h3 id="分级标题">分级标题</h3><p>使用 === 表示一级标题，使用 — 表示二级标题。</p>
<p>示例：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="header">这是一个一级标题</span><br><span class="line">============================</span></span><br><span class="line"></span><br><span class="line"><span class="header">这是一个二级标题</span><br><span class="line">--------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">### 这是一个三级标题</span><br></pre></td></tr></table></figure>
<p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</p>
<h2 id="外链接">外链接</h2><p>使用 [描述](链接地址) 为文字增加外链接。</p>
<p>示例：</p>
<p>这是去往 <a href="https://github.com/zerosrat" target="_blank" rel="external">本人github</a> 的链接。</p>
<h3 id="无序列表">无序列表</h3><p>使用 *，+，- 表示无序列表。</p>
<p>示例：</p>
<ul>
<li>无序列表项 一</li>
<li>无序列表项 二</li>
<li>无序列表项 三</li>
</ul>
<h3 id="有序列表">有序列表</h3><p>使用数字和点表示有序列表。</p>
<p>示例：</p>
<ol>
<li>有序列表项 一</li>
<li>有序列表项 二</li>
<li>有序列表项 三</li>
</ol>
<h3 id="文字引用">文字引用</h3><p>使用 &gt; 表示文字引用。</p>
<p>示例：</p>
<blockquote>
<p>野火烧不尽，春风吹又生。</p>
</blockquote>
<h3 id="行内代码块">行内代码块</h3><p>使用 `代码` 表示行内代码块。</p>
<p>示例：</p>
<p>让我们聊聊 <code>html</code>。</p>
<h3 id="代码块">代码块</h3><p>使用 四个缩进空格 表示代码块。</p>
<p>示例：</p>
<pre><code>这是一个代码块，此行左侧有四个不可见的空格。
</code></pre><h3 id="插入图像">插入图像</h3><p>使用 ![描述](图片链接地址) 插入图像。</p>
<p>示例：</p>
<p><img src="http://7xoxnz.com1.z0.glb.clouddn.com/logo1.png" alt="我的头像"></p>
<h2 id="语法进阶">语法进阶</h2><h3 id="删除线">删除线</h3><p>使用 ~~ 表示删除线。</p>
<p><del>这是一段错误的文本。</del></p>
<h3 id="加强的代码块">加强的代码块</h3><p>支持四十一种编程语言的语法高亮的显示，行号显示。</p>
<p>非代码示例：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-<span class="built_in">get</span> install <span class="keyword">vim</span>-gnome</span><br></pre></td></tr></table></figure>
<p>Python 示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="decorator">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span><br><span class="line"><span class="prompt">... </span>prompt'''</span></span><br></pre></td></tr></table></figure>
<p>JavaScript 示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">* nth element in the fibonacci series.</span><br><span class="line">* @param n &gt;= 0</span><br><span class="line">* @return the nth element, &gt;= 0.</span><br><span class="line">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> tmp;</span><br><span class="line">  <span class="keyword">while</span> (--n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    tmp = a;</span><br><span class="line">    a += b;</span><br><span class="line">    b = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(fib(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>
<h3 id="使用图标">使用图标</h3><p>使用 <a href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/" target="_blank" rel="external">font-awesome</a> 的图标，在文档中输入</p>
<pre><code><span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"icon-weibo"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span>
</code></pre><p>即显示微博的图标： <i class="icon-weibo icon-2x"></i></p>
<p>替换 上述 <code>i 标签</code> 内的 <code>icon-weibo</code> 以显示不同的图标，例如：</p>
<pre><code><span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"icon-github"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span>
</code></pre><p>即显示github的图标： <i class="icon-github icon-2x"></i></p>
<p>更多的图标和玩法可以参看 <a href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/" target="_blank" rel="external">font-awesome</a> 官方网站。</p>
]]></content>
    <summary type="html">
    <![CDATA[如何优雅地使用MarkDown]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello Hexo]]></title>
    <link href="http://zerosrat.github.io/2015/10/30/hello-world/"/>
    <id>http://zerosrat.github.io/2015/10/30/hello-world/</id>
    <published>2015-10-29T16:02:11.000Z</published>
    <updated>2016-04-12T14:22:52.698Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>最近接触到了 <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a> 。这是我的第一篇文章。 可以阅读 <a href="http://hexo.io/docs/" target="_blank" rel="external">文档</a>  来了解更多。在使用<a href="http://hexo.io/" target="_blank" rel="external">Hexo</a> 遇到了问题，可以直接 <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">问题解答</a> 或是在 <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a> 上提出issues.</p>
<blockquote>
<p>开启Hexo之旅</p>
</blockquote>
<h2 id="快速开始">快速开始</h2><h3 id="新建一篇文章">新建一篇文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>了解更多： <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">写作</a></p>
<h3 id="启动本地服务器">启动本地服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>了解更多: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">服务器</a></p>
<h3 id="生成静态文件">生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>了解更多: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">生成</a></p>
<h3 id="部署网站">部署网站</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>了解更多: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">部署</a></p>
<p>或是 <strong>手动拷贝</strong> 生成的静态文件（~/public）</p>
]]></content>
    <summary type="html">
    <![CDATA[开启Hexo之旅]]>
    
    </summary>
    
  </entry>
  
</feed>
